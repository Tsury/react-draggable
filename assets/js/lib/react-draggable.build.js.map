{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///react-draggable.build.js","webpack:///webpack/bootstrap f417f0895728fefa73bc","webpack:///./assets/js/src/components/Draggable.jsx","webpack:///external \"react\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_Draggable","_Draggable2","_react","_react2","Draggable","createClass","displayName","propTypes","additionalClass","PropTypes","string","bounds","object","children","oneOfType","array","isRequired","contentPosition","dragCallback","func","dragLeaveCallback","dragStartCallback","dragStopCallback","initialPosition","lock","preventDefaultEvents","bool","touchScrollLock","translate3d","getInitialState","elPos","props","pos","x","y","dragging","rel","enabled","elementStyle","position","checkTimerStarted","scrollLocked","dragLocked","componentDidMount","_allowDragThreshold","_mouseDownWhileDisabled","doSwipe","_cssProperties","supported","prefix","document","body","style","borderRadius","objectPrefix","MozBorderRadius","webkitBorderRadius","addEventListener","_onMouseMove","_onMouseUp","componentWillUnmount","removeEventListener","render","_this","className","renderedChildren","Children","map","child","newStyle","childStyle","state","assign","cloneElement","ref","createElement","onTouchStart","_onMouseDown","onTouchLeave","_onMouseOut","onMouseDown","onMouseOut","setEnabled","setState","setStyle","oldStyle","setPosition","positionContent","getPosition","positionTransformString","transformStyle","msTransform","WebkitTransform","MozTransform","transform","e","mouseDownOnElement","transformValues","_parseTransformValues","refs","draggableChild","xVal","Number","yVal","pageX","clientX","pageY","clientY","isNaN","type","changedTouches","inputX","inputY","contentX","contentY","target","stopPropagation","preventDefault","difX","difY","newPos","x1","y1","x2","y2","y3","element","transformString","matrix","values","match"],"mappings":"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","file":"react-draggable.build.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ResponsiveImage\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ResponsiveImage\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ResponsiveImage\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ResponsiveImage\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!*******************************!*\\\n  !*** ./assets/js/src/main.js ***!\n  \\*******************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _Draggable = __webpack_require__(/*! ./components/Draggable.jsx */ 1);\n\n\tvar _Draggable2 = _interopRequireDefault(_Draggable);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = _Draggable2.default;\n\n/***/ },\n/* 1 */\n/*!************************************************!*\\\n  !*** ./assets/js/src/components/Draggable.jsx ***!\n  \\************************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(/*! react */ 2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * Draggable component\n\t * @class\n\t */\n\tvar Draggable = _react2.default.createClass({\n\t  /**\n\t   * Used by React as the component name\n\t   */\n\t  displayName: 'Draggable',\n\t\n\t  /**\n\t   * Expected propTypes\n\t   * @prop {String} additionalClass - A string of additional classnames to add\n\t   * to the element\n\t   * @prop {Object} bounds - An array of coordinates the user cannot drag the\n\t   * component outside of\n\t   * @prop {Object} children - Child React elements\n\t   * @prop {String} contentPosition - The css positioning for for the element\n\t   * ('absolute' or 'fixed', defaults to 'absolute')\n\t   * @prop {Function} dragCallback - The function to call while the user is\n\t   * dragging\n\t   * @prop {Function} dragStartCallback - The function to call when the user\n\t   * starts dragging\n\t   * @prop {Function} dragStopCallback - The function to call when the user\n\t   * stops dragging\n\t   * @prop {Function} dragLeaveCallback - A function to call when the user is\n\t   * dragging and the mouse/touch leaves the draggable component\n\t   * @prop {Object} initialPosition - An object with initial x and y values for the\n\t   * content\n\t   * @prop {String} lock - An axis to lock element to when dragging, either\n\t   * 'x' or 'y'\n\t   * @prop {Boolean} preventDefaultEvents - Whether to prevent default\n\t   * mouse/touch events\n\t   * @prop {String} touchScrollLock - If set to true, prevents the content from\n\t   * being dragged if the user is scrolling in the opposite direction on a touchend\n\t   * device\n\t   * @prop {Boolean} translate3d - Whether to use css3 transform3d for\n\t   * positioning\n\t   */\n\t  propTypes: {\n\t    additionalClass: _react2.default.PropTypes.string,\n\t    bounds: _react2.default.PropTypes.object,\n\t    children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object]).isRequired,\n\t    contentPosition: _react2.default.PropTypes.string,\n\t    dragCallback: _react2.default.PropTypes.func,\n\t    dragLeaveCallback: _react2.default.PropTypes.func,\n\t    dragStartCallback: _react2.default.PropTypes.func,\n\t    dragStopCallback: _react2.default.PropTypes.func,\n\t    initialPosition: _react2.default.PropTypes.object,\n\t    lock: _react2.default.PropTypes.string,\n\t    preventDefaultEvents: _react2.default.PropTypes.bool,\n\t    touchScrollLock: _react2.default.PropTypes.bool,\n\t    translate3d: _react2.default.PropTypes.bool\n\t  },\n\t\n\t  /**\n\t   * Get initial state object\n\t   * @returns {Object} initial object\n\t   */\n\t  getInitialState: function getInitialState() {\n\t    var elPos = this.props.contentPosition || 'absolute';\n\t\n\t    return {\n\t      pos: this.props.initialPosition || { x: 0, y: 0 },\n\t      dragging: false,\n\t      rel: null,\n\t      enabled: true,\n\t      elementStyle: {\n\t        position: elPos\n\t      },\n\t      checkTimerStarted: false,\n\t      scrollLocked: false,\n\t      dragLocked: false\n\t    };\n\t  },\n\t\n\t\n\t  /**\n\t   * Called after component mounts to DOM\n\t   * @returns {undefined} undefined\n\t   */\n\t  componentDidMount: function componentDidMount() {\n\t    this._allowDragThreshold = 40;\n\t    this._mouseDownWhileDisabled = false;\n\t\n\t    if (this.props.lock && this.props.touchScrollLock) {\n\t      this.doSwipe = false;\n\t    } else {\n\t      this.doSwipe = true;\n\t    }\n\t\n\t    this._cssProperties = {\n\t      supported: false,\n\t      prefix: ''\n\t    };\n\t\n\t    if (typeof document.body.style.borderRadius !== 'undefined') {\n\t      this._cssProperties.supported = true;\n\t      this._cssProperties.prefix = '';\n\t      this._cssProperties.objectPrefix = '';\n\t    }\n\t\n\t    if (typeof document.body.style.MozBorderRadius !== 'undefined') {\n\t      this._cssProperties.supported = true;\n\t      this._cssProperties.prefix = '-moz-';\n\t      this._cssProperties.objectPrefix = 'moz';\n\t    }\n\t\n\t    if (typeof document.body.style.webkitBorderRadius !== 'undefined') {\n\t      this._cssProperties.supported = true;\n\t      this._cssProperties.prefix = '-webkit-';\n\t      this._cssProperties.objectPrefix = 'Webkit';\n\t    }\n\t\n\t    document.addEventListener('mousemove', this._onMouseMove);\n\t    document.addEventListener('touchmove', this._onMouseMove);\n\t\n\t    document.addEventListener('mouseup', this._onMouseUp);\n\t    document.addEventListener('touchend', this._onMouseUp);\n\t  },\n\t\n\t\n\t  /**\n\t   * Called before component is removed from the DOM\n\t   * @returns {undefined} undefined\n\t   */\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    document.removeEventListener('mousemove', this._onMouseMove);\n\t    document.removeEventListener('touchmove', this._onMouseMove);\n\t\n\t    document.removeEventListener('mouseup', this._onMouseUp);\n\t    document.removeEventListener('touchend', this._onMouseUp);\n\t  },\n\t\n\t\n\t  /**\n\t   * Renders component\n\t   * @returns {Object} React element\n\t   */\n\t  render: function render() {\n\t    var _this = this;\n\t    var className = 'component-draggable';\n\t    if (this.props.additionalClass) {\n\t      className = 'component-draggable ' + this.props.additionalClass;\n\t    }\n\t\n\t    var renderedChildren = _react2.default.Children.map(this.props.children, function (child) {\n\t      var newStyle = {};\n\t      var childStyle = {};\n\t      if (child.props && child.props.style) {\n\t        childStyle = child.props.style;\n\t      }\n\t      var elementStyle = {};\n\t      if (_this.state && _this.state.elementStyle) {\n\t        elementStyle = _this.state.elementStyle;\n\t      }\n\t\n\t      if (_this.state.dragging && _this.state.enabled) {\n\t        newStyle = Object.assign(childStyle, elementStyle);\n\t      } else {\n\t        newStyle = Object.assign(elementStyle, childStyle);\n\t      }\n\t\n\t      return _react2.default.cloneElement(child, {\n\t        style: newStyle,\n\t        ref: 'draggableChild'\n\t      });\n\t    });\n\t\n\t    return _react2.default.createElement(\n\t      'div',\n\t      {\n\t        className: className,\n\t        onTouchStart: this._onMouseDown,\n\t        onTouchLeave: this._onMouseOut,\n\t        onMouseDown: this._onMouseDown,\n\t        onMouseOut: this._onMouseOut\n\t      },\n\t      renderedChildren\n\t    );\n\t  },\n\t\n\t\n\t  /**\n\t   * Enables or disables the element's draggability\n\t   * @param {Boolean} enabled Whether the draggable object should be enabled\n\t    * @returns {undefined} undefined\n\t   */\n\t  setEnabled: function setEnabled(enabled) {\n\t    this.setState({\n\t      enabled: enabled\n\t    });\n\t  },\n\t\n\t\n\t  /**\n\t   * Sets the element's style\n\t   * @param {Object} style An object key/value style attributes\n\t    * @returns {undefined} undefined\n\t   */\n\t  setStyle: function setStyle(style) {\n\t    var oldStyle = Object.assign({}, this.state.elementStyle);\n\t    var newStyle = Object.assign(oldStyle, style);\n\t\n\t    this.setState({\n\t      elementStyle: newStyle\n\t    });\n\t  },\n\t\n\t\n\t  /**\n\t   * Positions the draggable element\n\t   * @param {Object} pos - An object with x and y position values\n\t   * @returns {undefined} undefined\n\t   */\n\t  setPosition: function setPosition(pos) {\n\t    this.setState({\n\t      pos: pos\n\t    }, this.positionContent);\n\t  },\n\t\n\t\n\t  /**\n\t   * Gets the draggable element position\n\t   * @returns {Object} pos - An object with x and y position values\n\t   */\n\t  getPosition: function getPosition() {\n\t    return this.state.pos;\n\t  },\n\t\n\t\n\t  /**\n\t   * Positions the draggable element\n\t   * @returns {undefined} undefined\n\t   */\n\t  positionContent: function positionContent() {\n\t    var positionTransformString = 'translate(' + this.state.pos.x + 'px,' + this.state.pos.y + 'px)';\n\t    if (this.props.translate3d) {\n\t      positionTransformString = 'translate3d(' + this.state.pos.x + 'px ,' + this.state.pos.y + 'px, 0px)';\n\t    }\n\t\n\t    if (this.props.lock === 'x') {\n\t      positionTransformString = 'translate(' + this.state.pos.x + 'px, 0px)';\n\t      if (this.props.translate3d) {\n\t        positionTransformString = 'translate3d(' + this.state.pos.x + 'px, 0px, 0px)';\n\t      }\n\t    }\n\t\n\t    if (this.props.lock === 'y') {\n\t      positionTransformString = 'translate(0px, ' + this.state.pos.y + 'px)';\n\t      if (this.props.translate3d) {\n\t        positionTransformString = 'translate3d(0px, ' + this.state.pos.y + 'px, 0px)';\n\t      }\n\t    }\n\t\n\t    var transformStyle = {\n\t      msTransform: positionTransformString,\n\t      WebkitTransform: positionTransformString,\n\t      MozTransform: positionTransformString,\n\t      transform: positionTransformString\n\t    };\n\t\n\t    var oldStyle = Object.assign({}, this.state.elementStyle);\n\t    var newStyle = Object.assign(oldStyle, transformStyle);\n\t\n\t    this.setState({\n\t      elementStyle: newStyle\n\t    });\n\t  },\n\t\n\t\n\t  /**\n\t   * Called when the user's mouse is pressed\n\t   * @param {Event} e A mousedown event\n\t   * @returns {undefined} undefined\n\t   */\n\t  _onMouseDown: function _onMouseDown(e) {\n\t    this.mouseDownOnElement = true;\n\t\n\t    if (this.state.enabled) {\n\t      var transformValues = this._parseTransformValues(this.refs.draggableChild);\n\t      var xVal = Number(transformValues[0]);\n\t      var yVal = Number(transformValues[1]);\n\t      var pageX = e.clientX;\n\t      var pageY = e.clientY;\n\t\n\t      this._mouseDownWhileDisabled = false;\n\t\n\t      if (this.props.translate3d) {\n\t        xVal = Number(transformValues[1]);\n\t      }\n\t\n\t      if (this.props.translate3d) {\n\t        yVal = Number(transformValues[2]);\n\t      }\n\t\n\t      if (isNaN(xVal)) {\n\t        xVal = 0;\n\t      }\n\t\n\t      if (isNaN(yVal)) {\n\t        yVal = 0;\n\t      }\n\t\n\t      if (e.type !== 'mousedown') {\n\t        pageX = e.changedTouches[0].clientX;\n\t        pageY = e.changedTouches[0].clientY;\n\t      }\n\t\n\t      this.setState({\n\t        scrollLocked: false,\n\t        checkTimerStarted: true,\n\t        dragging: true,\n\t        rel: {\n\t          inputX: pageX,\n\t          inputY: pageY,\n\t          contentX: xVal,\n\t          contentY: yVal\n\t        }\n\t      });\n\t\n\t      if (this.props.dragStartCallback) {\n\t        this.props.dragStartCallback({\n\t          x: xVal,\n\t          y: yVal\n\t        }, e.target);\n\t      }\n\t    } else {\n\t      this._mouseDownWhileDisabled = true;\n\t    }\n\t\n\t    if (this.props.preventDefaultEvents) {\n\t      e.stopPropagation();\n\t      e.preventDefault();\n\t    }\n\t  },\n\t\n\t\n\t  /**\n\t   * Called when the user's mouse is moved\n\t   * @param {Event} e A mousemove event\n\t   * @returns {undefined} undefined\n\t   */\n\t  _onMouseMove: function _onMouseMove(e) {\n\t    if (this.mouseDownOnElement) {\n\t      var transformValues = this._parseTransformValues(this.refs.draggableChild);\n\t      var xVal = Number(transformValues[0]);\n\t      var yVal = Number(transformValues[1]);\n\t      var pageX = e.clientX;\n\t      var pageY = e.clientY;\n\t      var difX = 0;\n\t      var difY = 0;\n\t\n\t      if (this.props.translate3d) {\n\t        xVal = Number(transformValues[1]);\n\t      }\n\t\n\t      if (this.props.translate3d) {\n\t        yVal = Number(transformValues[2]);\n\t      }\n\t\n\t      if (isNaN(xVal)) {\n\t        xVal = 0;\n\t      }\n\t\n\t      if (isNaN(yVal)) {\n\t        yVal = 0;\n\t      }\n\t\n\t      if (!this.state.dragging) {\n\t        return;\n\t      }\n\t\n\t      if (e.type !== 'mousemove') {\n\t        pageX = e.changedTouches[0].clientX;\n\t        pageY = e.changedTouches[0].clientY;\n\t      }\n\t\n\t      // If the dragging is locked to the 'x' or 'y' axis,\n\t      // and the user is dragging (or scrolling on mobile) the opposite axis,\n\t      // stop any dragging. This is so the content doesn't move when a user is\n\t      // scrolling on a mobile device.\n\t      if (this.props.touchScrollLock && (this.props.lock === 'x' || this.props.lock === 'y')) {\n\t        difY = pageY - this.state.rel.inputY;\n\t        difX = pageX - this.state.rel.inputX;\n\t\n\t        if (difY < 0) {\n\t          difY *= -1;\n\t        }\n\t\n\t        if (difX < 0) {\n\t          difX *= -1;\n\t        }\n\t\n\t        if (this.props.lock === 'x') {\n\t          // if the content is locked to dragging horizontally\n\t          if (difX > difY) {\n\t            // if the user is intending to swipe horizontally\n\t            if (difX > 10 && !this.state.scrollLocked) {\n\t              this.doSwipe = true;\n\t              this.setState({ dragLocked: true });\n\t            }\n\t          } else {\n\t            // if the user is intending to swipe vertically\n\t            if (!this.state.dragLocked) {\n\t              this.setState({ scrollLocked: true });\n\t            }\n\t          }\n\t        } else {\n\t          // if the content is locked to dragging vertically\n\t          if (difY > difX) {\n\t            // if the user is intending to swipe vertically\n\t            if (difY > 10 && !this.state.scrollLocked) {\n\t              this.doSwipe = true;\n\t              this.setState({ dragLocked: true });\n\t            }\n\t          } else {\n\t            // if the user is intending to swipe horizontally\n\t            if (!this.state.dragLocked) {\n\t              this.setState({ scrollLocked: true });\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.doSwipe && !this.state.scrollLocked) {\n\t        var newPos = {\n\t          x: this.state.rel.contentX + (pageX - this.state.rel.inputX),\n\t          y: this.state.rel.contentY + (pageY - this.state.rel.inputY)\n\t        };\n\t\n\t        if (this.props.bounds) {\n\t          // if the bounds were supplied, don't let the content move outside\n\t          // of them\n\t          var bounds = this.props.bounds;\n\t\n\t          if (newPos.x < bounds.x1) {\n\t            newPos.x = bounds.x1;\n\t          }\n\t\n\t          if (newPos.y < bounds.y1) {\n\t            newPos.y = bounds.y1;\n\t          }\n\t\n\t          if (newPos.x > bounds.x2) {\n\t            newPos.x = bounds.x2;\n\t          }\n\t\n\t          if (newPos.y > bounds.y2) {\n\t            newPos.y = bounds.y3;\n\t          }\n\t        }\n\t\n\t        if (this.props.dragCallback) {\n\t          this.props.dragCallback(newPos, e.target);\n\t        }\n\t\n\t        this.setState({\n\t          pos: newPos\n\t        }, this.positionContent);\n\t      }\n\t    }\n\t\n\t    if (this.props.preventDefaultEvents) {\n\t      e.stopPropagation();\n\t      e.preventDefault();\n\t    }\n\t  },\n\t\n\t\n\t  /**\n\t   * Called when the user's mouse is released\n\t   * @param {Event} e A mouseup event\n\t   * @returns {undefined} undefined\n\t   */\n\t  _onMouseUp: function _onMouseUp(e) {\n\t    if (this.mouseDownOnElement && this.state.enabled && !this._mouseDownWhileDisabled) {\n\t      var transformValues = this._parseTransformValues(this.refs.draggableChild);\n\t      var xVal = Number(transformValues[0]);\n\t      var yVal = Number(transformValues[1]);\n\t\n\t      if (this.props.translate3d) {\n\t        xVal = Number(transformValues[1]);\n\t      }\n\t\n\t      if (this.props.translate3d) {\n\t        yVal = Number(transformValues[2]);\n\t      }\n\t\n\t      if (isNaN(xVal)) {\n\t        xVal = 0;\n\t      }\n\t\n\t      if (isNaN(yVal)) {\n\t        yVal = 0;\n\t      }\n\t\n\t      if (this.props.dragStopCallback && !this.state.scrollLocked) {\n\t        this.props.dragStopCallback({\n\t          x: xVal,\n\t          y: yVal\n\t        }, e.target);\n\t      }\n\t\n\t      this.setState({\n\t        dragging: false,\n\t        scrollLocked: false,\n\t        dragLocked: false\n\t      });\n\t    }\n\t\n\t    if (this.props.preventDefaultEvents) {\n\t      e.stopPropagation();\n\t      e.preventDefault();\n\t    }\n\t\n\t    this.mouseDownOnElement = false;\n\t  },\n\t\n\t\n\t  /**\n\t   * Called when the user is dragging but releases the mouse\n\t   * outside of the draggable component\n\t   * @returns {undefined} undefined\n\t   */\n\t  _onMouseOut: function _onMouseOut() {\n\t    if (this.state.dragging && this.props.dragLeaveCallback) {\n\t      this.setState({\n\t        dragging: false,\n\t        scrollLocked: false,\n\t        dragLocked: false\n\t      });\n\t\n\t      this.props.dragLeaveCallback();\n\t    }\n\t  },\n\t\n\t\n\t  /**\n\t   * Parses a CSS string containing a transform property\n\t   * @param {HTMLElement} element The element to get the CSS values from\n\t   * @returns {Array} An array of the transform values\n\t   */\n\t  _parseTransformValues: function _parseTransformValues(element) {\n\t    var transformString = 'transform';\n\t    if (this._cssProperties.objectPrefix !== '') {\n\t      transformString = 'Transform';\n\t    }\n\t    var matrix = element.style[this._cssProperties.objectPrefix + transformString];\n\t    var values = matrix.match(/-?[0-9\\.]+/g);\n\t\n\t    if (!values) {\n\t      values = [0, 0, 0];\n\t    }\n\t\n\t    return values;\n\t  }\n\t});\n\t\n\texports.default = Draggable;\n\n/***/ },\n/* 2 */\n/*!************************!*\\\n  !*** external \"react\" ***!\n  \\************************/\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** react-draggable.build.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f417f0895728fefa73bc\n **/","import React from 'react';\n\n\n/**\n * Draggable component\n * @class\n */\nconst Draggable = React.createClass({\n  /**\n   * Used by React as the component name\n   */\n  displayName: 'Draggable',\n\n\n  /**\n   * Expected propTypes\n   * @prop {String} additionalClass - A string of additional classnames to add\n   * to the element\n   * @prop {Object} bounds - An array of coordinates the user cannot drag the\n   * component outside of\n   * @prop {Object} children - Child React elements\n   * @prop {String} contentPosition - The css positioning for for the element\n   * ('absolute' or 'fixed', defaults to 'absolute')\n   * @prop {Function} dragCallback - The function to call while the user is\n   * dragging\n   * @prop {Function} dragStartCallback - The function to call when the user\n   * starts dragging\n   * @prop {Function} dragStopCallback - The function to call when the user\n   * stops dragging\n   * @prop {Function} dragLeaveCallback - A function to call when the user is\n   * dragging and the mouse/touch leaves the draggable component\n   * @prop {Object} initialPosition - An object with initial x and y values for the\n   * content\n   * @prop {String} lock - An axis to lock element to when dragging, either\n   * 'x' or 'y'\n   * @prop {Boolean} preventDefaultEvents - Whether to prevent default\n   * mouse/touch events\n   * @prop {String} touchScrollLock - If set to true, prevents the content from\n   * being dragged if the user is scrolling in the opposite direction on a touchend\n   * device\n   * @prop {Boolean} translate3d - Whether to use css3 transform3d for\n   * positioning\n   */\n  propTypes: {\n    additionalClass: React.PropTypes.string,\n    bounds: React.PropTypes.object,\n    children: React.PropTypes.oneOfType([\n      React.PropTypes.array,\n      React.PropTypes.object,\n    ]).isRequired,\n    contentPosition: React.PropTypes.string,\n    dragCallback: React.PropTypes.func,\n    dragLeaveCallback: React.PropTypes.func,\n    dragStartCallback: React.PropTypes.func,\n    dragStopCallback: React.PropTypes.func,\n    initialPosition: React.PropTypes.object,\n    lock: React.PropTypes.string,\n    preventDefaultEvents: React.PropTypes.bool,\n    touchScrollLock: React.PropTypes.bool,\n    translate3d: React.PropTypes.bool,\n  },\n\n\n  /**\n   * Get initial state object\n   * @returns {Object} initial object\n   */\n  getInitialState() {\n    const elPos = this.props.contentPosition || 'absolute';\n\n    return {\n      pos: this.props.initialPosition || { x: 0, y: 0 },\n      dragging: false,\n      rel: null,\n      enabled: true,\n      elementStyle: {\n        position: elPos,\n      },\n      checkTimerStarted: false,\n      scrollLocked: false,\n      dragLocked: false,\n    };\n  },\n\n\n  /**\n   * Called after component mounts to DOM\n   * @returns {undefined} undefined\n   */\n  componentDidMount() {\n    this._allowDragThreshold = 40;\n    this._mouseDownWhileDisabled = false;\n\n    if (this.props.lock && this.props.touchScrollLock) {\n      this.doSwipe = false;\n    } else {\n      this.doSwipe = true;\n    }\n\n    this._cssProperties = {\n      supported: false,\n      prefix: '',\n    };\n\n    if (typeof (document.body.style.borderRadius) !== 'undefined') {\n      this._cssProperties.supported = true;\n      this._cssProperties.prefix = '';\n      this._cssProperties.objectPrefix = '';\n    }\n\n    if (typeof (document.body.style.MozBorderRadius) !== 'undefined') {\n      this._cssProperties.supported = true;\n      this._cssProperties.prefix = '-moz-';\n      this._cssProperties.objectPrefix = 'moz';\n    }\n\n    if (typeof (document.body.style.webkitBorderRadius) !== 'undefined') {\n      this._cssProperties.supported = true;\n      this._cssProperties.prefix = '-webkit-';\n      this._cssProperties.objectPrefix = 'Webkit';\n    }\n\n    document.addEventListener('mousemove', this._onMouseMove);\n    document.addEventListener('touchmove', this._onMouseMove);\n\n    document.addEventListener('mouseup', this._onMouseUp);\n    document.addEventListener('touchend', this._onMouseUp);\n  },\n\n\n  /**\n   * Called before component is removed from the DOM\n   * @returns {undefined} undefined\n   */\n  componentWillUnmount() {\n    document.removeEventListener('mousemove', this._onMouseMove);\n    document.removeEventListener('touchmove', this._onMouseMove);\n\n    document.removeEventListener('mouseup', this._onMouseUp);\n    document.removeEventListener('touchend', this._onMouseUp);\n  },\n\n\n  /**\n   * Renders component\n   * @returns {Object} React element\n   */\n  render() {\n    const _this = this;\n    let className = 'component-draggable';\n    if (this.props.additionalClass) {\n      className = 'component-draggable ' + this.props.additionalClass;\n    }\n\n    const renderedChildren = React.Children.map(this.props.children, (child) => {\n      let newStyle = {};\n      let childStyle = {};\n      if (child.props && child.props.style) {\n        childStyle = child.props.style;\n      }\n      let elementStyle = {};\n      if (_this.state && _this.state.elementStyle) {\n        elementStyle = _this.state.elementStyle;\n      }\n\n      if (_this.state.dragging && _this.state.enabled) {\n        newStyle = Object.assign(childStyle, elementStyle);\n      } else {\n        newStyle = Object.assign(elementStyle, childStyle);\n      }\n\n      return React.cloneElement(child, {\n        style: newStyle,\n        ref: 'draggableChild',\n      });\n    });\n\n    return (\n      <div\n        className={className}\n        onTouchStart={this._onMouseDown}\n        onTouchLeave={this._onMouseOut}\n        onMouseDown={this._onMouseDown}\n        onMouseOut={this._onMouseOut}\n      >\n        {renderedChildren}\n    </div>\n    );\n  },\n\n\n  /**\n   * Enables or disables the element's draggability\n   * @param {Boolean} enabled Whether the draggable object should be enabled\n    * @returns {undefined} undefined\n   */\n  setEnabled(enabled) {\n    this.setState({\n      enabled,\n    });\n  },\n\n\n  /**\n   * Sets the element's style\n   * @param {Object} style An object key/value style attributes\n    * @returns {undefined} undefined\n   */\n  setStyle(style) {\n    const oldStyle = Object.assign({}, this.state.elementStyle);\n    const newStyle = Object.assign(oldStyle, style);\n\n    this.setState({\n      elementStyle: newStyle,\n    });\n  },\n\n\n  /**\n   * Positions the draggable element\n   * @param {Object} pos - An object with x and y position values\n   * @returns {undefined} undefined\n   */\n  setPosition(pos) {\n    this.setState({\n      pos,\n    }, this.positionContent);\n  },\n\n\n  /**\n   * Gets the draggable element position\n   * @returns {Object} pos - An object with x and y position values\n   */\n  getPosition() {\n    return this.state.pos;\n  },\n\n\n  /**\n   * Positions the draggable element\n   * @returns {undefined} undefined\n   */\n  positionContent() {\n    let positionTransformString = 'translate(' + this.state.pos.x + 'px,' +\n      this.state.pos.y + 'px)';\n    if (this.props.translate3d) {\n      positionTransformString = 'translate3d(' + this.state.pos.x + 'px ,' +\n        this.state.pos.y + 'px, 0px)';\n    }\n\n    if (this.props.lock === 'x') {\n      positionTransformString = 'translate(' + this.state.pos.x + 'px, 0px)';\n      if (this.props.translate3d) {\n        positionTransformString = 'translate3d(' + this.state.pos.x + 'px, 0px, 0px)';\n      }\n    }\n\n    if (this.props.lock === 'y') {\n      positionTransformString = 'translate(0px, ' + this.state.pos.y + 'px)';\n      if (this.props.translate3d) {\n        positionTransformString = 'translate3d(0px, ' + this.state.pos.y + 'px, 0px)';\n      }\n    }\n\n    const transformStyle = {\n      msTransform: positionTransformString,\n      WebkitTransform: positionTransformString,\n      MozTransform: positionTransformString,\n      transform: positionTransformString,\n    };\n\n    const oldStyle = Object.assign({}, this.state.elementStyle);\n    const newStyle = Object.assign(oldStyle, transformStyle);\n\n    this.setState({\n      elementStyle: newStyle,\n    });\n  },\n\n\n  /**\n   * Called when the user's mouse is pressed\n   * @param {Event} e A mousedown event\n   * @returns {undefined} undefined\n   */\n  _onMouseDown(e) {\n    this.mouseDownOnElement = true;\n\n    if (this.state.enabled) {\n      const transformValues = this._parseTransformValues(this.refs.draggableChild);\n      let xVal = Number(transformValues[0]);\n      let yVal = Number(transformValues[1]);\n      let pageX = e.clientX;\n      let pageY = e.clientY;\n\n      this._mouseDownWhileDisabled = false;\n\n      if (this.props.translate3d) {\n        xVal = Number(transformValues[1]);\n      }\n\n      if (this.props.translate3d) {\n        yVal = Number(transformValues[2]);\n      }\n\n      if (isNaN(xVal)) {\n        xVal = 0;\n      }\n\n      if (isNaN(yVal)) {\n        yVal = 0;\n      }\n\n      if (e.type !== 'mousedown') {\n        pageX = e.changedTouches[0].clientX;\n        pageY = e.changedTouches[0].clientY;\n      }\n\n      this.setState({\n        scrollLocked: false,\n        checkTimerStarted: true,\n        dragging: true,\n        rel: {\n          inputX: pageX,\n          inputY: pageY,\n          contentX: xVal,\n          contentY: yVal,\n        },\n      });\n\n      if (this.props.dragStartCallback) {\n        this.props.dragStartCallback({\n          x: xVal,\n          y: yVal,\n        },\n        e.target);\n      }\n    } else {\n      this._mouseDownWhileDisabled = true;\n    }\n\n    if (this.props.preventDefaultEvents) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  },\n\n\n  /**\n   * Called when the user's mouse is moved\n   * @param {Event} e A mousemove event\n   * @returns {undefined} undefined\n   */\n  _onMouseMove(e) {\n    if (this.mouseDownOnElement) {\n      const transformValues = this._parseTransformValues(this.refs.draggableChild);\n      let xVal = Number(transformValues[0]);\n      let yVal = Number(transformValues[1]);\n      let pageX = e.clientX;\n      let pageY = e.clientY;\n      let difX = 0;\n      let difY = 0;\n\n      if (this.props.translate3d) {\n        xVal = Number(transformValues[1]);\n      }\n\n      if (this.props.translate3d) {\n        yVal = Number(transformValues[2]);\n      }\n\n      if (isNaN(xVal)) {\n        xVal = 0;\n      }\n\n      if (isNaN(yVal)) {\n        yVal = 0;\n      }\n\n      if (!this.state.dragging) {\n        return;\n      }\n\n      if (e.type !== 'mousemove') {\n        pageX = e.changedTouches[0].clientX;\n        pageY = e.changedTouches[0].clientY;\n      }\n\n      // If the dragging is locked to the 'x' or 'y' axis,\n      // and the user is dragging (or scrolling on mobile) the opposite axis,\n      // stop any dragging. This is so the content doesn't move when a user is\n      // scrolling on a mobile device.\n      if (this.props.touchScrollLock && (this.props.lock === 'x' ||\n        this.props.lock === 'y')) {\n        difY = (pageY - this.state.rel.inputY);\n        difX = (pageX - this.state.rel.inputX);\n\n        if (difY < 0) {\n          difY *= -1;\n        }\n\n        if (difX < 0) {\n          difX *= -1;\n        }\n\n        if (this.props.lock === 'x') {\n          // if the content is locked to dragging horizontally\n          if (difX > difY) {\n            // if the user is intending to swipe horizontally\n            if (difX > 10 && !this.state.scrollLocked) {\n              this.doSwipe = true;\n              this.setState({ dragLocked: true });\n            }\n          } else {\n            // if the user is intending to swipe vertically\n            if (!this.state.dragLocked) {\n              this.setState({ scrollLocked: true });\n            }\n          }\n        } else {\n          // if the content is locked to dragging vertically\n          if (difY > difX) {\n            // if the user is intending to swipe vertically\n            if (difY > 10 && !this.state.scrollLocked) {\n              this.doSwipe = true;\n              this.setState({ dragLocked: true });\n            }\n          } else {\n            // if the user is intending to swipe horizontally\n            if (!this.state.dragLocked) {\n              this.setState({ scrollLocked: true });\n            }\n          }\n        }\n      }\n\n      if (this.doSwipe && !this.state.scrollLocked) {\n        const newPos = {\n          x: this.state.rel.contentX + (pageX - this.state.rel.inputX),\n          y: this.state.rel.contentY + (pageY - this.state.rel.inputY),\n        };\n\n        if (this.props.bounds) {\n          // if the bounds were supplied, don't let the content move outside\n          // of them\n          const bounds = this.props.bounds;\n\n          if (newPos.x < bounds.x1) {\n            newPos.x = bounds.x1;\n          }\n\n          if (newPos.y < bounds.y1) {\n            newPos.y = bounds.y1;\n          }\n\n          if (newPos.x > bounds.x2) {\n            newPos.x = bounds.x2;\n          }\n\n          if (newPos.y > bounds.y2) {\n            newPos.y = bounds.y3;\n          }\n        }\n\n        if (this.props.dragCallback) {\n          this.props.dragCallback(newPos, e.target);\n        }\n\n        this.setState({\n          pos: newPos,\n        }, this.positionContent);\n      }\n    }\n\n    if (this.props.preventDefaultEvents) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  },\n\n\n  /**\n   * Called when the user's mouse is released\n   * @param {Event} e A mouseup event\n   * @returns {undefined} undefined\n   */\n  _onMouseUp(e) {\n    if (this.mouseDownOnElement &&\n      this.state.enabled &&\n      !this._mouseDownWhileDisabled) {\n      const transformValues = this._parseTransformValues(this.refs.draggableChild);\n      let xVal = Number(transformValues[0]);\n      let yVal = Number(transformValues[1]);\n\n      if (this.props.translate3d) {\n        xVal = Number(transformValues[1]);\n      }\n\n      if (this.props.translate3d) {\n        yVal = Number(transformValues[2]);\n      }\n\n      if (isNaN(xVal)) {\n        xVal = 0;\n      }\n\n      if (isNaN(yVal)) {\n        yVal = 0;\n      }\n\n      if (this.props.dragStopCallback && !this.state.scrollLocked) {\n        this.props.dragStopCallback({\n          x: xVal,\n          y: yVal,\n        }, e.target);\n      }\n\n      this.setState({\n        dragging: false,\n        scrollLocked: false,\n        dragLocked: false,\n      });\n    }\n\n    if (this.props.preventDefaultEvents) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    this.mouseDownOnElement = false;\n  },\n\n\n  /**\n   * Called when the user is dragging but releases the mouse\n   * outside of the draggable component\n   * @returns {undefined} undefined\n   */\n  _onMouseOut() {\n    if (this.state.dragging && this.props.dragLeaveCallback) {\n      this.setState({\n        dragging: false,\n        scrollLocked: false,\n        dragLocked: false,\n      });\n\n      this.props.dragLeaveCallback();\n    }\n  },\n\n\n  /**\n   * Parses a CSS string containing a transform property\n   * @param {HTMLElement} element The element to get the CSS values from\n   * @returns {Array} An array of the transform values\n   */\n  _parseTransformValues(element) {\n    let transformString = 'transform';\n    if (this._cssProperties.objectPrefix !== '') {\n      transformString = 'Transform';\n    }\n    const matrix = element.style[this._cssProperties.objectPrefix + transformString];\n    let values = matrix.match(/-?[0-9\\.]+/g);\n\n    if (!values) {\n      values = [0, 0, 0];\n    }\n\n    return values;\n  },\n});\n\nexport default Draggable;\n\n\n\n/** WEBPACK FOOTER **\n ** ./assets/js/src/components/Draggable.jsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}